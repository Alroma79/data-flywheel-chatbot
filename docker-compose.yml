services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend/app:/app
      - ./frontend:/frontend
    env_file:
      - .env
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY:-sk-test-key-for-testing}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./chatbot.db}
      - DEFAULT_MODEL=${DEFAULT_MODEL:-gpt-4o}
      - DEFAULT_TEMPERATURE=${DEFAULT_TEMPERATURE:-0.7}
      - CORS_ORIGINS=${CORS_ORIGINS:-["*"]}
      - DEBUG=${DEBUG:-false}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # PostgreSQL database service (optional - can be disabled by commenting out)
  db:
    image: postgres:14
    container_name: postgres_db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: chatbot
    volumes:
      - postgres_data:/var/lib/postgresql/data
    profiles:
      - postgres

  # Test service for running pytest in isolation
  test:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./backend/app:/app
      - ./tests:/tests
    environment:
      - OPENAI_API_KEY=sk-test-key-for-testing
      - DATABASE_URL=sqlite:///./test_chatbot.db
      - DEFAULT_MODEL=gpt-4o
      - DEFAULT_TEMPERATURE=0.7
      - CORS_ORIGINS=["*"]
      - DEBUG=true
    command: ["python", "-m", "pytest", "/tests/", "-q", "--tb=short"]
    profiles:
      - test

volumes:
  postgres_data: